---
###
### Linkerd Viz Extension Namespace
###
---
kind: Namespace
apiVersion: v1
metadata:
  name: linkerd-viz
  labels:
    linkerd.io/extension: linkerd-viz
  annotations:
    linkerd.io/inject: enabled
---
###
### Grafana RBAC
###
---
kind: ServiceAccount
apiVersion: v1
metadata:
  name: linkerd-grafana
  namespace: linkerd-viz
  labels:
    linkerd.io/extension: linkerd-viz
    component: grafana
    namespace: linkerd-viz
---
###
### Tap RBAC
###
---
kind: ClusterRole
apiVersion: rbac.authorization.k8s.io/v1
metadata:
  name: linkerd-linkerd-viz-tap
  labels:
    linkerd.io/extension: linkerd-viz
    component: tap
rules:
- apiGroups: [""]
  resources: ["pods", "services", "replicationcontrollers", "namespaces", "nodes"]
  verbs: ["list", "get", "watch"]
- apiGroups: ["extensions", "apps"]
  resources: ["daemonsets", "deployments", "replicasets", "statefulsets"]
  verbs: ["list", "get", "watch"]
- apiGroups: ["extensions", "batch"]
  resources: ["cronjobs", "jobs"]
  verbs: ["list" , "get", "watch"]
---
kind: ClusterRole
apiVersion: rbac.authorization.k8s.io/v1
metadata:
  name: linkerd-linkerd-viz-tap-admin
  labels:
    linkerd.io/extension: linkerd-viz
    component: tap
rules:
- apiGroups: ["tap.linkerd.io"]
  resources: ["*"]
  verbs: ["watch"]
---
kind: ClusterRoleBinding
apiVersion: rbac.authorization.k8s.io/v1
metadata:
  name: linkerd-linkerd-viz-tap
  labels:
    linkerd.io/extension: linkerd-viz
    component: tap
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: ClusterRole
  name: linkerd-linkerd-viz-tap
subjects:
- kind: ServiceAccount
  name: linkerd-tap
  namespace: linkerd-viz
---
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRoleBinding
metadata:
  name: linkerd-linkerd-viz-tap-auth-delegator
  labels:
    linkerd.io/extension: linkerd-viz
    component: tap
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: ClusterRole
  name: system:auth-delegator
subjects:
- kind: ServiceAccount
  name: linkerd-tap
  namespace: linkerd-viz
---
kind: ServiceAccount
apiVersion: v1
metadata:
  name: linkerd-tap
  namespace: linkerd-viz
  labels:
    linkerd.io/extension: linkerd-viz
    component: tap
    namespace: linkerd-viz
---
apiVersion: rbac.authorization.k8s.io/v1
kind: RoleBinding
metadata:
  name: linkerd-linkerd-viz-tap-auth-reader
  namespace: kube-system
  labels:
    linkerd.io/extension: linkerd-viz
    component: tap
    namespace: linkerd-viz
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: Role
  name: extension-apiserver-authentication-reader
subjects:
- kind: ServiceAccount
  name: linkerd-tap
  namespace: linkerd-viz
---
kind: Secret
apiVersion: v1
metadata:
  name: linkerd-tap-k8s-tls
  namespace: linkerd-viz
  labels:
    linkerd.io/extension: linkerd-viz
    component: tap
    namespace: linkerd-viz
  annotations:
    linkerd.io/created-by: linkerd/helm dev-undefined
type: kubernetes.io/tls
data:
  tls.crt: LS0tLS1CRUdJTiBDRVJUSUZJQ0FURS0tLS0tCk1JSURQakNDQWlhZ0F3SUJBZ0lSQUlRSXNVamVuQzh3eGpQWlFpcUxiTUF3RFFZSktvWklodmNOQVFFTEJRQXcKSmpFa01DSUdBMVVFQXhNYmJHbHVhMlZ5WkMxMFlYQXViR2x1YTJWeVpDMTJhWG91YzNaak1CNFhEVEl3TVRJeQpNakl3TURjME1Wb1hEVEl4TVRJeU1qSXdNRGMwTVZvd0pqRWtNQ0lHQTFVRUF4TWJiR2x1YTJWeVpDMTBZWEF1CmJHbHVhMlZ5WkMxMmFYb3VjM1pqTUlJQklqQU5CZ2txaGtpRzl3MEJBUUVGQUFPQ0FROEFNSUlCQ2dLQ0FRRUEKbWlRamJrazhIM2xRSjAvOWFVWm5OZUtmWkx5WFA4UEZvQWlwN2ZMUEdxaXlqSmJLTkJiUklDMVQzWHRhTFRKYgpoMjcwL1FBb3plTE82My80UThmdXpoYUhmcEhkQldxM0txbE82THF0bTRjTE5vckdFbnB2SUNOekd0Q2VKYUhaCkluME1mSmdWcm91VkVtRlJUeFpXMGx1T2crNG91OTgxN1lGR1liKy9nQXVLOVZKKy9HZ1ViM2NFZzdwenB4QTgKM1BFWTB6NU5xdGc2Zkw5UnRSVlNIREZGSFJyQ1ZMcFA4QittVFY5d2psZEdyaUVnc2lodkswV1JTdUZtUUJuWQpIMWYra0ZJRlIwUVBmeVNmQ2szNU1va1NRLzZYbWVMZ2dzZDBPWG9odUhiRE0zQ1JMbzZ3aEJoaEp6UW16N0N5CmIrbExqcStxL0F1d2lGZUp4QWNobVFJREFRQUJvMmN3WlRBT0JnTlZIUThCQWY4RUJBTUNCYUF3SFFZRFZSMGwKQkJZd0ZBWUlLd1lCQlFVSEF3RUdDQ3NHQVFVRkJ3TUNNQXdHQTFVZEV3RUIvd1FDTUFBd0pnWURWUjBSQkI4dwpIWUliYkdsdWEyVnlaQzEwWVhBdWJHbHVhMlZ5WkMxMmFYb3VjM1pqTUEwR0NTcUdTSWIzRFFFQkN3VUFBNElCCkFRQ0xRYTFKRFp0MjR1RjUyWjlDRTBIUkJKWnBjZ3BXWWVtVFBTTk5jeDdJaHlKZTQ2WlU5eFpmekJCOTZCOVYKTmxldnJYaGM0akJkaFhwOWVIOFR1NTh1THBHc0tMOEZNZ09oZTVpc3hQSEFzOGdFVlVxUUVhS0NoOEVMZ3VESQpRWnYvS0dVNXo5VG03SFNqTHFSQnNydTlZYTErMU1QVk5DMmhOS2c5ME03bEhiV0N3d2JuaFN2YU8wUEswLzRsClQ3dzBkMGxvSFBzTFcwV2pWWTV1bXY3Q1YvejlwaFhLTUNSRGY4azY3dkx0SmwyamNBQzZFTlk5NkFoVFJ6U0EKWFFHTDZaS1JTT3NZZEEvK0UvY3BDZzRnRzdKemtRMFNEL21XZDBxUHVrQWRXWU9LbHFPaE9mT3BJWGJKaTRpWgowa3M4WGVtbHJKNVV1ZVE1eTVOcDFYTHIKLS0tLS1FTkQgQ0VSVElGSUNBVEUtLS0tLQ==
  tls.key: LS0tLS1CRUdJTiBSU0EgUFJJVkFURSBLRVktLS0tLQpNSUlFb2dJQkFBS0NBUUVBbWlRamJrazhIM2xRSjAvOWFVWm5OZUtmWkx5WFA4UEZvQWlwN2ZMUEdxaXlqSmJLCk5CYlJJQzFUM1h0YUxUSmJoMjcwL1FBb3plTE82My80UThmdXpoYUhmcEhkQldxM0txbE82THF0bTRjTE5vckcKRW5wdklDTnpHdENlSmFIWkluME1mSmdWcm91VkVtRlJUeFpXMGx1T2crNG91OTgxN1lGR1liKy9nQXVLOVZKKwovR2dVYjNjRWc3cHpweEE4M1BFWTB6NU5xdGc2Zkw5UnRSVlNIREZGSFJyQ1ZMcFA4QittVFY5d2psZEdyaUVnCnNpaHZLMFdSU3VGbVFCbllIMWYra0ZJRlIwUVBmeVNmQ2szNU1va1NRLzZYbWVMZ2dzZDBPWG9odUhiRE0zQ1IKTG82d2hCaGhKelFtejdDeWIrbExqcStxL0F1d2lGZUp4QWNobVFJREFRQUJBb0lCQUFSaVVyK29SWlYvbGRBSQpibVM0SStkY2Nyd2l3UXFIUHUrMlQxNzlNUGJKSllycUh3WXNQL1p5VTVoUkVkZUhQeU15L0xUVmRGT214OHZhCjcreTltd1V4anRrQ3ZRNlNZbk5NTFhwaEZONy9rRW9VMkYxZUxocno1eW8wRk10dE53Zk1GcmJVZklsaVh2TU8KNFlrbVVZSGFLTXVIMHBERllIdEkyZitkdkl5ZnZCODMzY2tDS0l2TTgzWFdCKytNTURObURFeWhCdnY3ekhPSwpOWVBjYzFKY1g3QW5MeWJwR2Iyc0Y0NDdYRnB3bkhmN3RBSU9BMWxoQkd2VVhTWWVrZkhJZXU1a0JBK2RPbkdoCmtXOTNJT3pGQXBERnRjUGRPYTJFak5Va0pQeS9EOUowMmdoaU95Z3NnU1l3dml6NnVxOUZFVEF3bkMzRE94TVQKczd3aVJJRUNnWUVBeCtpUm5iWEhocUNpRkczZUE4MEord2F3TXJRd0FzRERwZjI1ZFpETUNmRWZRTFNCTGdsdwpyRzdnYXFxcC85NXFGbGpxNUQxL3JVS2IzK2d0MklYbGlFSm5FK1o2d2x5clJIOWs4ZFRiOE5jeUF1WVhyYWJLCnNHS3F1TjR3c3c5eEZOYlJxWEp5anh5YVljcjVQOWNZNGp3UVNsblUzNG5MNit6NFA3UnF6Q1VDZ1lFQXhXUWEKU1lpT3d0T1NCSlFDR1dMTUQxcFc2aVlENkhEVy9oQThwcEhqTnNDSmZ0ZTVpWkdTRUhJcG83R3dzTGJ2aVQ4Mgp5V1laTHNQT1FLYTJ0eU1yZzNRNisweVlURTVuRVhrbm9oUm9GelFSN3JYQzIzTTdyek1Jb2RxYWNkV0RaOVh2CmwraVNUaDhHRGw5RU1PWEtabk9iYWZYN0ovWXMrWlBaYU5qekMyVUNnWUJmbG5ReWJoNDI0STQvcUgwMVloQjQKcUswTndaMEhZL2JwWXhZUUFpbWVRMTZIU1FoUDVCR3RVZU1hL2ZvRnIrc1lQbklxcXNGbkxtZHNQQS9YN2NaZwpUaWdObXZKdUIzT1pjRFRyY2JXdFJxalNQQVZzY2ttTzU4N3NVTW9HaE1hMGlUZDloNDBCbzFLcW1peHVlMEtaCnd0Q2pUS3IrTEZ5R3RpdktBbEhpeFFLQmdCb2lYOHllbFBBOG5OZVlWUkxSWHQwbGc5NXFmQmY1WUsyd3JxY0wKSjc4bkRNMUxlSmc3T3RDTW5QQzhaUDF3cXhSTDExQWhBWEtNb0RFMUlYbnI0U1g5YkpXN0ZXcjg4bTZBMFB1SApvaVI0VTJ0OGl6a003N2tKazdvQ1BIS1g1MWNISHpySW94NU93em1CNllCajNFRm1Td3hqY2daZmRLTHlyVlZSCmJCUjFBb0dBRVZsN2M3ekgxcmlLT05kWmhrenFYSkJ4NTErcVRCd0plN2w1dklRVU5FczR2ZkJEeVJzUklNUGgKcklqeGROY3JCS0w5d3RudnQ4cWovb0tldFFvMzZiaWkvOHhvb2NzR0ZoUEp1V3d4YU1yTGt0QnRSQzU5L0thTgoxWnFTN1Z4bll1NUlwdkwrcWxYb0RXN2tKcFY4TVNDNkoyV0pQYjNKeFJtRklWSUtjKzA9Ci0tLS0tRU5EIFJTQSBQUklWQVRFIEtFWS0tLS0t
---
apiVersion: apiregistration.k8s.io/v1
kind: APIService
metadata:
  name: v1alpha1.tap.linkerd.io
  labels:
    linkerd.io/extension: linkerd-viz
    component: tap
spec:
  group: tap.linkerd.io
  version: v1alpha1
  groupPriorityMinimum: 1000
  versionPriority: 100
  service:
    name: linkerd-tap
    namespace: linkerd-viz
  caBundle: LS0tLS1CRUdJTiBDRVJUSUZJQ0FURS0tLS0tCk1JSURQakNDQWlhZ0F3SUJBZ0lSQUlRSXNVamVuQzh3eGpQWlFpcUxiTUF3RFFZSktvWklodmNOQVFFTEJRQXcKSmpFa01DSUdBMVVFQXhNYmJHbHVhMlZ5WkMxMFlYQXViR2x1YTJWeVpDMTJhWG91YzNaak1CNFhEVEl3TVRJeQpNakl3TURjME1Wb1hEVEl4TVRJeU1qSXdNRGMwTVZvd0pqRWtNQ0lHQTFVRUF4TWJiR2x1YTJWeVpDMTBZWEF1CmJHbHVhMlZ5WkMxMmFYb3VjM1pqTUlJQklqQU5CZ2txaGtpRzl3MEJBUUVGQUFPQ0FROEFNSUlCQ2dLQ0FRRUEKbWlRamJrazhIM2xRSjAvOWFVWm5OZUtmWkx5WFA4UEZvQWlwN2ZMUEdxaXlqSmJLTkJiUklDMVQzWHRhTFRKYgpoMjcwL1FBb3plTE82My80UThmdXpoYUhmcEhkQldxM0txbE82THF0bTRjTE5vckdFbnB2SUNOekd0Q2VKYUhaCkluME1mSmdWcm91VkVtRlJUeFpXMGx1T2crNG91OTgxN1lGR1liKy9nQXVLOVZKKy9HZ1ViM2NFZzdwenB4QTgKM1BFWTB6NU5xdGc2Zkw5UnRSVlNIREZGSFJyQ1ZMcFA4QittVFY5d2psZEdyaUVnc2lodkswV1JTdUZtUUJuWQpIMWYra0ZJRlIwUVBmeVNmQ2szNU1va1NRLzZYbWVMZ2dzZDBPWG9odUhiRE0zQ1JMbzZ3aEJoaEp6UW16N0N5CmIrbExqcStxL0F1d2lGZUp4QWNobVFJREFRQUJvMmN3WlRBT0JnTlZIUThCQWY4RUJBTUNCYUF3SFFZRFZSMGwKQkJZd0ZBWUlLd1lCQlFVSEF3RUdDQ3NHQVFVRkJ3TUNNQXdHQTFVZEV3RUIvd1FDTUFBd0pnWURWUjBSQkI4dwpIWUliYkdsdWEyVnlaQzEwWVhBdWJHbHVhMlZ5WkMxMmFYb3VjM1pqTUEwR0NTcUdTSWIzRFFFQkN3VUFBNElCCkFRQ0xRYTFKRFp0MjR1RjUyWjlDRTBIUkJKWnBjZ3BXWWVtVFBTTk5jeDdJaHlKZTQ2WlU5eFpmekJCOTZCOVYKTmxldnJYaGM0akJkaFhwOWVIOFR1NTh1THBHc0tMOEZNZ09oZTVpc3hQSEFzOGdFVlVxUUVhS0NoOEVMZ3VESQpRWnYvS0dVNXo5VG03SFNqTHFSQnNydTlZYTErMU1QVk5DMmhOS2c5ME03bEhiV0N3d2JuaFN2YU8wUEswLzRsClQ3dzBkMGxvSFBzTFcwV2pWWTV1bXY3Q1YvejlwaFhLTUNSRGY4azY3dkx0SmwyamNBQzZFTlk5NkFoVFJ6U0EKWFFHTDZaS1JTT3NZZEEvK0UvY3BDZzRnRzdKemtRMFNEL21XZDBxUHVrQWRXWU9LbHFPaE9mT3BJWGJKaTRpWgowa3M4WGVtbHJKNVV1ZVE1eTVOcDFYTHIKLS0tLS1FTkQgQ0VSVElGSUNBVEUtLS0tLQ==
---
###
### Web RBAC
###
---
apiVersion: rbac.authorization.k8s.io/v1
kind: Role
metadata:
  name: linkerd-web
  namespace: linkerd
  labels:
    linkerd.io/extension: linkerd-viz
    component: web
    namespace: linkerd
rules:
- apiGroups: [""]
  resources: ["configmaps"]
  verbs: ["get"]
  resourceNames: ["linkerd-config"]
- apiGroups: [""]
  resources: ["namespaces", "configmaps"]
  verbs: ["get"]
- apiGroups: [""]
  resources: ["serviceaccounts", "pods"]
  verbs: ["list"]
- apiGroups: ["apps"]
  resources: ["replicasets"]
  verbs: ["list"]
---
apiVersion: rbac.authorization.k8s.io/v1
kind: RoleBinding
metadata:
  name: linkerd-web
  namespace: linkerd
  labels:
    linkerd.io/extension: linkerd-viz
    component: web
    namespace: linkerd
roleRef:
  kind: Role
  name: linkerd-web
  apiGroup: rbac.authorization.k8s.io
subjects:
- kind: ServiceAccount
  name: linkerd-web
  namespace: linkerd-viz
---
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRole
metadata:
  name: linkerd-linkerd-viz-web-check
  labels:
    linkerd.io/extension: linkerd-viz
    component: web
rules:
- apiGroups: ["rbac.authorization.k8s.io"]
  resources: ["clusterroles", "clusterrolebindings"]
  verbs: ["list"]
- apiGroups: ["apiextensions.k8s.io"]
  resources: ["customresourcedefinitions"]
  verbs: ["list"]
- apiGroups: ["admissionregistration.k8s.io"]
  resources: ["mutatingwebhookconfigurations", "validatingwebhookconfigurations"]
  verbs: ["list"]
- apiGroups: ["policy"]
  resources: ["podsecuritypolicies"]
  verbs: ["list"]
- apiGroups: ["linkerd.io"]
  resources: ["serviceprofiles"]
  verbs: ["list"]
- apiGroups: ["apiregistration.k8s.io"]
  resources: ["apiservices"]
  verbs: ["get"]
---
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRoleBinding
metadata:
  name: linkerd-linkerd-viz-web-check
  labels:
    linkerd.io/extension: linkerd-viz
    component: web
roleRef:
  kind: ClusterRole
  name: linkerd-linkerd-viz-web-check
  apiGroup: rbac.authorization.k8s.io
subjects:
- kind: ServiceAccount
  name: linkerd-web
  namespace: linkerd-viz
---
kind: ClusterRoleBinding
apiVersion: rbac.authorization.k8s.io/v1
metadata:
  name: linkerd-linkerd-viz-web-admin
  labels:
    linkerd.io/extension: linkerd-viz
    component: web
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: ClusterRole
  name: linkerd-linkerd-viz-tap-admin
subjects:
- kind: ServiceAccount
  name: linkerd-web
  namespace: linkerd-viz
---
kind: ServiceAccount
apiVersion: v1
metadata:
  name: linkerd-web
  namespace: linkerd-viz
  labels:
    linkerd.io/extension: linkerd-viz
    component: web
    namespace: linkerd-viz
---
apiVersion: rbac.authorization.k8s.io/v1
kind: RoleBinding
metadata:
  name: linkerd-viz-psp
  namespace: linkerd-viz
  labels:
    linkerd.io/extension: linkerd-viz
    namespace: linkerd-viz
roleRef:
  kind: Role
  name: linkerd-psp
  apiGroup: rbac.authorization.k8s.io
subjects:
- kind: ServiceAccount
  name: linkerd-tap
  namespace: linkerd-viz
- kind: ServiceAccount
  name: linkerd-web
  namespace: linkerd-viz
- kind: ServiceAccount
  name: linkerd-grafana
  namespace: linkerd-viz
---
###
### Grafana
###
---
kind: ConfigMap
apiVersion: v1
metadata:
  name: linkerd-grafana-config
  namespace: linkerd-viz
  labels:
    linkerd.io/extension: linkerd-viz
    component: grafana
    namespace: linkerd-viz
  annotations:
    linkerd.io/created-by: linkerd/helm dev-undefined
data:
  grafana.ini: |-
    instance_name = linkerd-grafana
    [server]
    root_url = %(protocol)s://%(domain)s:/grafana/
    [auth]
    disable_login_form = true
    [auth.anonymous]
    enabled = true
    org_role = Editor
    [auth.basic]
    enabled = false
    [analytics]
    check_for_updates = false
    [panels]
    disable_sanitize_html = true
  datasources.yaml: |-
    apiVersion: 1
    datasources:
    - name: prometheus
      type: prometheus
      access: proxy
      orgId: 1
      url: external-prom.com
      isDefault: true
      jsonData:
        timeInterval: "5s"
      version: 1
      editable: true

  dashboards.yaml: |-
    apiVersion: 1
    providers:
    - name: 'default'
      orgId: 1
      folder: ''
      type: file
      disableDeletion: true
      editable: true
      options:
        path: /var/lib/grafana/dashboards
        homeDashboardId: linkerd-top-line
---
kind: Service
apiVersion: v1
metadata:
  name: linkerd-grafana
  namespace: linkerd-viz
  labels:
    linkerd.io/extension: linkerd-viz
    component: grafana
    namespace: linkerd-viz
  annotations:
    linkerd.io/created-by: linkerd/helm dev-undefined
spec:
  type: ClusterIP
  selector:
    linkerd.io/extension: linkerd-viz
    component: grafana
  ports:
  - name: http
    port: 3000
    targetPort: 3000
---
apiVersion: apps/v1
kind: Deployment
metadata:
  annotations:
    linkerd.io/created-by: linkerd/helm dev-undefined
  labels:
    linkerd.io/extension: linkerd-viz
    app.kubernetes.io/name: grafana
    app.kubernetes.io/part-of: Linkerd
    app.kubernetes.io/version: dev-undefined
    component: grafana
    namespace: linkerd-viz
  name: linkerd-grafana
  namespace: linkerd-viz
spec:
  replicas: 1
  selector:
    matchLabels:
      linkerd.io/extension: linkerd-viz
      component: grafana
      namespace: linkerd-viz
  template:
    metadata:
      annotations:
        linkerd.io/created-by: linkerd/helm dev-undefined
      labels:
        linkerd.io/extension: linkerd-viz
        component: grafana
        namespace: linkerd-viz
    spec:
      nodeSelector:
        beta.kubernetes.io/os: linux
      containers:
      - env:
        - name: GF_PATHS_DATA
          value: /data
        # Force using the go-based DNS resolver instead of the OS' to avoid failures in some environments
        # see https://github.com/grafana/grafana/issues/20096
        - name: GODEBUG
          value: netdns=go
        image: ghcr.io/linkerd/grafana:dev-undefined
        imagePullPolicy: 
        livenessProbe:
          httpGet:
            path: /api/health
            port: 3000
          initialDelaySeconds: 30
        name: grafana
        ports:
        - containerPort: 3000
          name: http
        readinessProbe:
          httpGet:
            path: /api/health
            port: 3000
        resources:
        securityContext:
          runAsUser: 472
        volumeMounts:
        - mountPath: /data
          name: data
        - mountPath: /etc/grafana
          name: grafana-config
          readOnly: true
      serviceAccountName: linkerd-grafana
      volumes:
      - emptyDir: {}
        name: data
      - configMap:
          items:
          - key: grafana.ini
            path: grafana.ini
          - key: datasources.yaml
            path: provisioning/datasources/datasources.yaml
          - key: dashboards.yaml
            path: provisioning/dashboards/dashboards.yaml
          name: linkerd-grafana-config
        name: grafana-config
---
###
### Tap
###
---
kind: Service
apiVersion: v1
metadata:
  name: linkerd-tap
  namespace: linkerd-viz
  labels:
    linkerd.io/extension: linkerd-viz
    component: tap
    namespace: linkerd-viz
  annotations:
    linkerd.io/created-by: linkerd/helm dev-undefined
spec:
  type: ClusterIP
  selector:
    linkerd.io/extension: linkerd-viz
    component: tap
  ports:
  - name: grpc
    port: 8088
    targetPort: 8088
  - name: apiserver
    port: 443
    targetPort: apiserver
---
kind: Deployment
apiVersion: apps/v1
metadata:
  annotations:
    linkerd.io/created-by: linkerd/helm dev-undefined
  labels:
    linkerd.io/extension: linkerd-viz
    app.kubernetes.io/name: tap
    app.kubernetes.io/part-of: Linkerd
    app.kubernetes.io/version: dev-undefined
    component: tap
    namespace: linkerd-viz
  name: linkerd-tap
  namespace: linkerd-viz
spec:
  replicas: 1
  selector:
    matchLabels:
      linkerd.io/extension: linkerd-viz
      component: tap
      namespace: linkerd-viz
  template:
    metadata:
      annotations:
        checksum/config: c10a1b1e2313e2b524ee26db8f89dca55e316aafe4c8df1a2ea36c9b4198eb0f
        linkerd.io/created-by: linkerd/helm dev-undefined
      labels:
        linkerd.io/extension: linkerd-viz
        component: tap
        namespace: linkerd-viz
    spec:
      nodeSelector:
        beta.kubernetes.io/os: linux
      containers:
      - args:
        - tap
        - -controller-namespace=linkerd
        - -log-level=info
        - -identity-trust-domain=cluster.local
        image: ghcr.io/linkerd/controller:dev-undefined
        imagePullPolicy: 
        livenessProbe:
          httpGet:
            path: /ping
            port: 9998
          initialDelaySeconds: 10
        name: tap
        ports:
        - containerPort: 8088
          name: grpc
        - containerPort: 8089
          name: apiserver
        - containerPort: 9998
          name: admin-http
        readinessProbe:
          failureThreshold: 7
          httpGet:
            path: /ready
            port: 9998
        securityContext:
          runAsUser: 2103
        volumeMounts:
        - mountPath: /var/run/linkerd/tls
          name: tls
          readOnly: true
      serviceAccountName: linkerd-tap
      volumes:
      - name: tls
        secret:
          secretName: linkerd-tap-k8s-tls

---
###
### Web
###
---
kind: Service
apiVersion: v1
metadata:
  name: linkerd-web
  namespace: linkerd-viz
  labels:
    linkerd.io/extension: linkerd-viz
    component: web
    namespace: linkerd-viz
  annotations:
    linkerd.io/created-by: linkerd/helm dev-undefined
spec:
  type: ClusterIP
  selector:
    linkerd.io/extension: linkerd-viz
    component: web
  ports:
  - name: http
    port: 8084
    targetPort: 8084
  - name: admin-http
    port: 9994
    targetPort: 9994
---
apiVersion: apps/v1
kind: Deployment
metadata:
  annotations:
    linkerd.io/created-by: linkerd/helm dev-undefined
  labels:
    linkerd.io/extension: linkerd-viz
    app.kubernetes.io/name: web
    app.kubernetes.io/part-of: Linkerd
    app.kubernetes.io/version: dev-undefined
    component: web
    namespace: linkerd-viz
  name: linkerd-web
  namespace: linkerd-viz
spec:
  replicas: 1
  selector:
    matchLabels:
      linkerd.io/extension: linkerd-viz
      component: web
      namespace: linkerd-viz
  template:
    metadata:
      annotations:
        linkerd.io/created-by: linkerd/helm dev-undefined
      labels:
        linkerd.io/extension: linkerd-viz
        component: web
        namespace: linkerd-viz
    spec:
      nodeSelector:
        beta.kubernetes.io/os: linux
      containers:
      - args:
        - -api-addr=linkerd-controller-api.linkerd.svc.cluster.local:8085
        - -cluster-domain=cluster.local
        - -grafana-addr=linkerd-grafana.linkerd-viz.svc.cluster.local:3000
        - -controller-namespace=linkerd
        - -log-level=info
        - -enforced-host=^(localhost|127\.0\.0\.1|linkerd-web\.linkerd-viz\.svc\.cluster\.local|linkerd-web\.linkerd-viz\.svc|\[::1\])(:\d+)?$
        image: ghcr.io/linkerd/web:dev-undefined
        imagePullPolicy: 
        livenessProbe:
          httpGet:
            path: /ping
            port: 9994
          initialDelaySeconds: 10
        name: web
        ports:
        - containerPort: 8084
          name: http
        - containerPort: 9994
          name: admin-http
        readinessProbe:
          failureThreshold: 7
          httpGet:
            path: /ready
            port: 9994
        resources:
        securityContext:
          runAsUser: 2103
      serviceAccountName: linkerd-web
